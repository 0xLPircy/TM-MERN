// starts with "npm run server"

* CRUD
    - Create: /api/xyz+payload, success:201+location
    - Read: /api/xyz, success: 200+payload
    - Update: /api/xyz/1+payload, success: 200
    - Delete: /api/xyz/1, success: 200

* Imports
    - express and env is imported with require
    - const app = express();

* app.get("/api/goals", (req, res) => {
  res.status(200).json({ message: "getGoals" });
});
    - request and response is added, 
        so when request is api/goals, response is the json
    - .status makes status 200

* Router
    - ` const router = express.Router(); `
    - ` app.use("/api/goals", require("./routes/goalRoutes")); `
        now when /api/goals is called, goes in this file. 

* Controller
    - controller ke consts are called instead of definign what happends in a re, res, in the router only
    - so,
        Router: `router.get("/", getGoals); `
        Controller: ` const getGoals = (req, res) => {
                        res.status(200).json({ message: 'Get goals' })
                    } `
    - Can chain route requests
        ` router.route("/").get(getGoals).post(setGoal);
            router.route('/:id').put(updateGoal).delete(deleteGoal);
        `

(Getting body data put in postman body area abhi)
added middleware to read it for json and utf in server
     ` app.use(express.json()); //to get values from body as they are undefined warna
        app.use(express.urlencoded({ extended: false })); //middleware to accept data from body
    `
* Error Handling
    - we want to overwrite express ka default erorr handler caus eits not pretty enoiugh
    - create middleware file
    - (err, req, res, next)
        we pass this to overwrite default, 
    - err has .message
        has .stack ie more info on the error

(in mongo everything will be promise so we will make our req res funcs async)
we could use try catch but instead express-async-handler is used

* SETTING UP MONGODB
    - organization -> project -> collection
    - compass in laptop app
    - driver in env
    - config folder -> db.js file
    - `     const conn = await mongoose.connect(process.env.MONGO_URI); `
    - add conn to an async func -> iport and run func in server.js
    - YAYAY

* Models (schemas)
    - model folder -> goalModel.js
    - import mongoose -> define schema 
    - export as ` module.exports = mongoose.model("Goal", goalSchema); `
    - import in controller 